//leetcode  924. Minimize Malware Spread

class Solution {
public:
    class dsu {
    public:
        vector<int> parent, size;
        dsu(int n) {
            parent.resize(n);
            size.resize(n);
            for (int i = 0; i < n; i++) {
                parent[i] = i;
                size[i] = 1;
            }
        }
        int par(int node) {
            if (parent[node] == node) {
                return node;
            }
            return parent[node] = par(parent[node]);
        }
        void union_size(int u, int v) {
            int ult_u = par(u);
            int ult_v = par(v);
            if (ult_u == ult_v) return;
            if (size[ult_u] < size[ult_v]) {
                parent[ult_u] = ult_v;
                size[ult_v] += size[ult_u];
            } else {
                parent[ult_v] = ult_u;
                size[ult_u] += size[ult_v];
            }
        }
    };
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        dsu ds(n);
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(i!=j && graph[i][j]==1){
                    ds.union_size(i,j);
                }
            }
        }
        vector<int> par_(n,0);
        for(auto it:initial){
            par_[ds.par(it)]++;
        }
        int ans = INT_MAX;
        int max_size = 0;
        sort(initial.begin(),initial.end());
        for(auto it:initial){
            int p1 = ds.par(it);
            if(par_[p1] == 1){
                if(max_size<ds.size[p1]){
                    ans = it;
                    max_size = ds.size[p1];
                }
            }
        }
        if(ans == INT_MAX) return initial[0];
        return ans;
    }
};